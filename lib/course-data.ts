import type { Course, UserProgress } from "@/types/course"

// SimulaÃ§Ã£o de dados - em produÃ§Ã£o viria de uma API/banco de dados
export const mockCourses: Course[] = [
  {
    id: "1",
    title: "JavaScript Moderno: Do Zero ao Profissional",
    description: "Aprenda JavaScript desde o bÃ¡sico atÃ© conceitos avanÃ§ados com projetos prÃ¡ticos.",
    duration: "8 semanas",
    level: "iniciante",
    format: "misto",
    createdAt: new Date(),
    lessons: [
      {
        id: "1-1",
        title: "ðŸš€ Fundamentos e ConfiguraÃ§Ã£o do Ambiente",
        objective: "Entender os conceitos bÃ¡sicos do JavaScript e preparar o ambiente",
        content: `# Bem-vindo ao JavaScript!

JavaScript Ã© uma das linguagens de programaÃ§Ã£o mais populares do mundo. Criada em 1995, ela evoluiu de uma simples linguagem para adicionar interatividade Ã s pÃ¡ginas web para uma linguagem completa que roda em servidores, aplicativos mÃ³veis e atÃ© mesmo em dispositivos IoT.

## Por que aprender JavaScript?

- **Versatilidade**: Uma linguagem, mÃºltiplas plataformas
- **Mercado**: Alta demanda por desenvolvedores JavaScript
- **Comunidade**: Enorme comunidade e recursos disponÃ­veis
- **EvoluÃ§Ã£o**: Constantemente atualizada com novas funcionalidades

## Configurando seu ambiente

### 1. Editor de CÃ³digo
Recomendamos o **Visual Studio Code** (VS Code):
- Gratuito e open source
- ExtensÃµes poderosas
- Debugging integrado
- Terminal integrado

### 2. Node.js
O Node.js permite executar JavaScript fora do navegador:
- Baixe em nodejs.org
- Instale a versÃ£o LTS (Long Term Support)
- Verifique a instalaÃ§Ã£o: \`node --version\`

### 3. ExtensÃµes Ãšteis para VS Code
- **JavaScript (ES6) code snippets**
- **Prettier - Code formatter**
- **ESLint**
- **Live Server**

## Seu primeiro programa

\`\`\`javascript
console.log("OlÃ¡, mundo!");
\`\`\`

ParabÃ©ns! VocÃª acabou de escrever seu primeiro programa em JavaScript.`,
        materials: "MDN Web Docs, VS Code, Node.js",
        practice: "Configure seu ambiente e crie um arquivo hello.js",
        duration: 45,
        order: 1,
        quiz: {
          id: "quiz-1-1",
          questions: [
            {
              id: "q1",
              question: "Em que ano o JavaScript foi criado?",
              options: ["1993", "1995", "1997", "1999"],
              correctAnswer: 1,
              explanation: "JavaScript foi criado em 1995 por Brendan Eich na Netscape.",
            },
            {
              id: "q2",
              question: "Qual comando verifica a versÃ£o do Node.js instalada?",
              options: ["node -v", "node --version", "npm version", "Ambas A e B"],
              correctAnswer: 3,
              explanation: 'Tanto "node -v" quanto "node --version" mostram a versÃ£o do Node.js.',
            },
          ],
        },
      },
      {
        id: "1-2",
        title: "ðŸ“Š VariÃ¡veis, Tipos de Dados e Operadores",
        objective: "Dominar os tipos de dados fundamentais e como manipulÃ¡-los",
        content: `# VariÃ¡veis e Tipos de Dados

## Declarando VariÃ¡veis

Em JavaScript moderno, usamos principalmente \`let\` e \`const\`:

\`\`\`javascript
// const - valor nÃ£o pode ser reatribuÃ­do
const nome = "JoÃ£o";
const idade = 25;

// let - valor pode ser alterado
let pontuacao = 0;
pontuacao = 100; // OK

// var - evite usar (escopo confuso)
var antiga = "nÃ£o recomendado";
\`\`\`

## Tipos de Dados Primitivos

### 1. String (Texto)
\`\`\`javascript
const nome = "Maria";
const sobrenome = 'Silva';
const nomeCompleto = \`\${nome} \${sobrenome}\`; // Template literal
\`\`\`

### 2. Number (NÃºmeros)
\`\`\`javascript
const inteiro = 42;
const decimal = 3.14;
const negativo = -10;
\`\`\`

### 3. Boolean (Verdadeiro/Falso)
\`\`\`javascript
const ativo = true;
const inativo = false;
\`\`\`

### 4. Undefined e Null
\`\`\`javascript
let indefinido; // undefined
const vazio = null; // null (ausÃªncia intencional de valor)
\`\`\`

## Operadores

### AritmÃ©ticos
\`\`\`javascript
const a = 10;
const b = 3;

console.log(a + b); // 13 (soma)
console.log(a - b); // 7 (subtraÃ§Ã£o)
console.log(a * b); // 30 (multiplicaÃ§Ã£o)
console.log(a / b); // 3.333... (divisÃ£o)
console.log(a % b); // 1 (resto da divisÃ£o)
\`\`\`

### ComparaÃ§Ã£o
\`\`\`javascript
console.log(5 == "5");  // true (igualdade com conversÃ£o)
console.log(5 === "5"); // false (igualdade estrita)
console.log(5 != "5");  // false
console.log(5 !== "5"); // true
console.log(5 > 3);     // true
console.log(5 <= 5);    // true
\`\`\`

### LÃ³gicos
\`\`\`javascript
const temIdade = true;
const temDocumento = false;

console.log(temIdade && temDocumento); // false (E)
console.log(temIdade || temDocumento); // true (OU)
console.log(!temIdade); // false (NÃƒO)
\`\`\``,
        materials: "JavaScript.info, ExercÃ­cios no Codewars",
        practice: "Crie variÃ¡veis para um perfil de usuÃ¡rio e pratique operaÃ§Ãµes",
        duration: 60,
        order: 2,
        quiz: {
          id: "quiz-1-2",
          questions: [
            {
              id: "q1",
              question: "Qual a diferenÃ§a entre == e === em JavaScript?",
              options: [
                "NÃ£o hÃ¡ diferenÃ§a",
                "== compara valor, === compara valor e tipo",
                "=== Ã© mais rÃ¡pido",
                "== Ã© mais moderno",
              ],
              correctAnswer: 1,
              explanation: "== faz conversÃ£o de tipo antes de comparar, === compara valor e tipo sem conversÃ£o.",
            },
          ],
        },
      },
    ],
  },
]

export const getUserProgress = (userId: string, courseId: string): UserProgress | null => {
  const saved = localStorage.getItem(`progress-${userId}-${courseId}`)
  return saved ? JSON.parse(saved) : null
}

export const saveUserProgress = (progress: UserProgress) => {
  localStorage.setItem(`progress-${progress.userId}-${progress.courseId}`, JSON.stringify(progress))
}
